/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package sk.stu.fiit.GUI;

import java.awt.Image;
import java.awt.event.MouseListener;
import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.net.SocketException;
import java.net.UnknownHostException;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.ResourceBundle;
import java.util.Set;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.stream.Collectors;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import sk.stu.fiit.Figurky.Bishop;
import sk.stu.fiit.Figurky.Knight;
import sk.stu.fiit.Figurky.Piece;
import sk.stu.fiit.Figurky.Queen;
import sk.stu.fiit.Figurky.Rook;
import sk.stu.fiit.Hrac.PerformMove;
import sk.stu.fiit.HraciaDoska.Board;
import sk.stu.fiit.HraciaDoska.Move;
import sk.stu.fiit.HraciaDoska.Move.CastlingMove;
import sk.stu.fiit.HraciaDoska.Move.Promotion;
import sk.stu.fiit.Side;
import sk.stu.fiit.sockets.SocketUser;

/**
 *
 * @author Matúš Baran
 */
public class MainWindow extends javax.swing.JFrame {

    /**
     * Creates new form MainWindow
     */
    public MainWindow() {
        initComponents();
        panelGame.setVisible(false);
        panelInit.setVisible(true);

        panelGameBoard.setLayout(null); //setting layout to null to be able to move with figures
        printMyIp(lblLocalIP);          //sets text of IPlabel  to local IP
        btnLanguageENMouseReleased(null);
        updateLocaleTexts();
    }

    public static Locale locale = Locale.ENGLISH;
    public static ResourceBundle bundle = ResourceBundle.getBundle("sk.stu.fiit.resources.resources", locale);

    private int[] nextPosBlackElim = {810, 70};
    private int[] nextPosWhiteElim = {810, 710};
    private List<JLabel> dots = new ArrayList<>();
    private long nextDot = 0;

    private Board board = null;
    private boolean isWhite;
    private boolean isOnline;

    private List<Move> moveHistory = new ArrayList<>();

    private JLabel selectedFigure = null;
    private Piece promotionPiece;

    public boolean isWhite() {
        return isWhite;
    }
//    private Guest guest = null;
//    private Host host = null;
    private SocketUser user = null;

    private void printMyIp(JLabel lbl) {
        try (final DatagramSocket socket = new DatagramSocket()) {
            socket.connect(InetAddress.getByName("8.8.8.8"), 10002);
            lbl.setText(socket.getLocalAddress().getHostAddress());
        } catch (SocketException ex) {
            System.err.println("Doplnit logger");
        } catch (UnknownHostException ex) {
            System.err.println("Doplnit logger");
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelLanguage = new javax.swing.JPanel();
        btnLanguageSK = new javax.swing.JButton();
        btnLanguageEN = new javax.swing.JButton();
        lblLocalIP = new javax.swing.JLabel();
        jLayeredPane1 = new javax.swing.JLayeredPane();
        panelGame = new javax.swing.JPanel();
        panelGameBoard = new javax.swing.JPanel();
        whitePawnA = new javax.swing.JLabel();
        whitePawnB = new javax.swing.JLabel();
        whitePawnC = new javax.swing.JLabel();
        whitePawnD = new javax.swing.JLabel();
        whitePawnE = new javax.swing.JLabel();
        whitePawnF = new javax.swing.JLabel();
        whitePawnG = new javax.swing.JLabel();
        whitePawnH = new javax.swing.JLabel();
        whiteRookL = new javax.swing.JLabel();
        whiteKnightL = new javax.swing.JLabel();
        whiteBishopL = new javax.swing.JLabel();
        whiteQueen = new javax.swing.JLabel();
        whiteKing = new javax.swing.JLabel();
        whiteBishopR = new javax.swing.JLabel();
        whiteKnightR = new javax.swing.JLabel();
        whiteRookR = new javax.swing.JLabel();
        blackPawnA = new javax.swing.JLabel();
        blackPawnB = new javax.swing.JLabel();
        blackPawnC = new javax.swing.JLabel();
        blackPawnD = new javax.swing.JLabel();
        blackPawnE = new javax.swing.JLabel();
        blackPawnF = new javax.swing.JLabel();
        blackPawnG = new javax.swing.JLabel();
        blackPawnH = new javax.swing.JLabel();
        blackRookL = new javax.swing.JLabel();
        blackKnightL = new javax.swing.JLabel();
        blackBishopL = new javax.swing.JLabel();
        blackQueen = new javax.swing.JLabel();
        blackKing = new javax.swing.JLabel();
        blackBishopR = new javax.swing.JLabel();
        blackKnightR = new javax.swing.JLabel();
        blackRookR = new javax.swing.JLabel();
        lblGameBoard = new javax.swing.JLabel();
        panelGameWhiteMiniFigures = new javax.swing.JPanel();
        panelGameBlackMiniFigures = new javax.swing.JPanel();
        panelGameRows = new javax.swing.JPanel();
        lblGameRows = new javax.swing.JLabel();
        panelGameColumns = new javax.swing.JPanel();
        lblGameColumns = new javax.swing.JLabel();
        panelGameDialog = new javax.swing.JPanel();
        scrollGameMoveHistory = new javax.swing.JScrollPane();
        txtGameMoveHistory = new javax.swing.JTextPane();
        lblGameMoveHistory = new javax.swing.JLabel();
        comboGameBoardColor = new javax.swing.JComboBox<>();
        lblGameBoardColor = new javax.swing.JLabel();
        panelGameOpponentInfo = new javax.swing.JPanel();
        lblGameOpponentInfo = new javax.swing.JLabel();
        btnOfferDraw = new javax.swing.JButton();
        btnSurrender = new javax.swing.JButton();
        panelInit = new javax.swing.JPanel();
        txtOpponentsIP = new javax.swing.JTextField();
        lblInitEnterIP = new javax.swing.JLabel();
        btnInitRules = new javax.swing.JButton();
        btnIintCreateGame = new javax.swing.JButton();
        btnInitPlayOffline = new javax.swing.JButton();
        btnInitJoinGame = new javax.swing.JButton();
        lblInitGameName = new javax.swing.JLabel();
        lblInitGameShortcut = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("OMGOC - OnlineMultiplayerGameOfChess");
        setPreferredSize(new java.awt.Dimension(1416, 939));
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        panelLanguage.setOpaque(false);
        panelLanguage.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnLanguageSK.setText("SK");
        btnLanguageSK.setPreferredSize(new java.awt.Dimension(50, 30));
        btnLanguageSK.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                btnLanguageSKMouseReleased(evt);
            }
        });
        panelLanguage.add(btnLanguageSK, new org.netbeans.lib.awtextra.AbsoluteConstraints(1340, 10, -1, -1));

        btnLanguageEN.setText("EN");
        btnLanguageEN.setPreferredSize(new java.awt.Dimension(50, 30));
        btnLanguageEN.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                btnLanguageENMouseReleased(evt);
            }
        });
        panelLanguage.add(btnLanguageEN, new org.netbeans.lib.awtextra.AbsoluteConstraints(1280, 10, -1, -1));

        lblLocalIP.setForeground(new java.awt.Color(200, 200, 200));
        lblLocalIP.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblLocalIP.setText("192.168.1.50");
        panelLanguage.add(lblLocalIP, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 0, 100, 20));

        getContentPane().add(panelLanguage, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1400, -1));

        jLayeredPane1.setPreferredSize(new java.awt.Dimension(1400, 900));
        jLayeredPane1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        panelGame.setBackground(new java.awt.Color(0, 40, 60));
        panelGame.setPreferredSize(new java.awt.Dimension(1400, 900));
        panelGame.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        panelGameBoard.setBackground(new java.awt.Color(255, 255, 255));
        panelGameBoard.setOpaque(false);
        panelGameBoard.setPreferredSize(new java.awt.Dimension(800, 800));
        panelGameBoard.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        whitePawnA.setIcon(new javax.swing.ImageIcon(getClass().getResource("/figurky_png/100x100/WP.png"))); // NOI18N
        panelGameBoard.add(whitePawnA, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 600, -1, -1));

        whitePawnB.setIcon(new javax.swing.ImageIcon(getClass().getResource("/figurky_png/100x100/WP.png"))); // NOI18N
        panelGameBoard.add(whitePawnB, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 600, -1, -1));

        whitePawnC.setIcon(new javax.swing.ImageIcon(getClass().getResource("/figurky_png/100x100/WP.png"))); // NOI18N
        panelGameBoard.add(whitePawnC, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 600, -1, -1));

        whitePawnD.setIcon(new javax.swing.ImageIcon(getClass().getResource("/figurky_png/100x100/WP.png"))); // NOI18N
        panelGameBoard.add(whitePawnD, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 600, -1, -1));

        whitePawnE.setIcon(new javax.swing.ImageIcon(getClass().getResource("/figurky_png/100x100/WP.png"))); // NOI18N
        panelGameBoard.add(whitePawnE, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 600, -1, -1));

        whitePawnF.setIcon(new javax.swing.ImageIcon(getClass().getResource("/figurky_png/100x100/WP.png"))); // NOI18N
        panelGameBoard.add(whitePawnF, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 600, -1, -1));

        whitePawnG.setIcon(new javax.swing.ImageIcon(getClass().getResource("/figurky_png/100x100/WP.png"))); // NOI18N
        panelGameBoard.add(whitePawnG, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 600, -1, -1));

        whitePawnH.setIcon(new javax.swing.ImageIcon(getClass().getResource("/figurky_png/100x100/WP.png"))); // NOI18N
        panelGameBoard.add(whitePawnH, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 600, 100, 100));

        whiteRookL.setIcon(new javax.swing.ImageIcon(getClass().getResource("/figurky_png/100x100/WR.png"))); // NOI18N
        panelGameBoard.add(whiteRookL, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 700, -1, -1));

        whiteKnightL.setIcon(new javax.swing.ImageIcon(getClass().getResource("/figurky_png/100x100/WN.png"))); // NOI18N
        panelGameBoard.add(whiteKnightL, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 700, -1, -1));

        whiteBishopL.setIcon(new javax.swing.ImageIcon(getClass().getResource("/figurky_png/100x100/WB.png"))); // NOI18N
        panelGameBoard.add(whiteBishopL, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 700, -1, -1));

        whiteQueen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/figurky_png/100x100/WQ.png"))); // NOI18N
        panelGameBoard.add(whiteQueen, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 700, -1, -1));

        whiteKing.setIcon(new javax.swing.ImageIcon(getClass().getResource("/figurky_png/100x100/WK.png"))); // NOI18N
        panelGameBoard.add(whiteKing, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 700, -1, -1));

        whiteBishopR.setIcon(new javax.swing.ImageIcon(getClass().getResource("/figurky_png/100x100/WB.png"))); // NOI18N
        panelGameBoard.add(whiteBishopR, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 700, -1, -1));

        whiteKnightR.setIcon(new javax.swing.ImageIcon(getClass().getResource("/figurky_png/100x100/WN.png"))); // NOI18N
        panelGameBoard.add(whiteKnightR, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 700, -1, -1));

        whiteRookR.setIcon(new javax.swing.ImageIcon(getClass().getResource("/figurky_png/100x100/WR.png"))); // NOI18N
        panelGameBoard.add(whiteRookR, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 700, -1, -1));

        blackPawnA.setIcon(new javax.swing.ImageIcon(getClass().getResource("/figurky_png/100x100/BP.png"))); // NOI18N
        panelGameBoard.add(blackPawnA, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 100, 100, 100));

        blackPawnB.setIcon(new javax.swing.ImageIcon(getClass().getResource("/figurky_png/100x100/BP.png"))); // NOI18N
        panelGameBoard.add(blackPawnB, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 100, 100, 100));

        blackPawnC.setIcon(new javax.swing.ImageIcon(getClass().getResource("/figurky_png/100x100/BP.png"))); // NOI18N
        panelGameBoard.add(blackPawnC, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 100, 100, 100));

        blackPawnD.setIcon(new javax.swing.ImageIcon(getClass().getResource("/figurky_png/100x100/BP.png"))); // NOI18N
        panelGameBoard.add(blackPawnD, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 100, 100, 100));

        blackPawnE.setIcon(new javax.swing.ImageIcon(getClass().getResource("/figurky_png/100x100/BP.png"))); // NOI18N
        panelGameBoard.add(blackPawnE, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 100, 100, 100));

        blackPawnF.setIcon(new javax.swing.ImageIcon(getClass().getResource("/figurky_png/100x100/BP.png"))); // NOI18N
        panelGameBoard.add(blackPawnF, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 100, 100, 100));

        blackPawnG.setIcon(new javax.swing.ImageIcon(getClass().getResource("/figurky_png/100x100/BP.png"))); // NOI18N
        panelGameBoard.add(blackPawnG, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 100, 100, 100));

        blackPawnH.setIcon(new javax.swing.ImageIcon(getClass().getResource("/figurky_png/100x100/BP.png"))); // NOI18N
        panelGameBoard.add(blackPawnH, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 100, 100, 100));

        blackRookL.setIcon(new javax.swing.ImageIcon(getClass().getResource("/figurky_png/100x100/BR.png"))); // NOI18N
        panelGameBoard.add(blackRookL, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 100, 100));

        blackKnightL.setIcon(new javax.swing.ImageIcon(getClass().getResource("/figurky_png/100x100/BN.png"))); // NOI18N
        panelGameBoard.add(blackKnightL, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 0, 100, 100));

        blackBishopL.setIcon(new javax.swing.ImageIcon(getClass().getResource("/figurky_png/100x100/BB.png"))); // NOI18N
        panelGameBoard.add(blackBishopL, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 0, 100, 100));

        blackQueen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/figurky_png/100x100/BQ.png"))); // NOI18N
        panelGameBoard.add(blackQueen, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 0, 100, 100));

        blackKing.setIcon(new javax.swing.ImageIcon(getClass().getResource("/figurky_png/100x100/BK.png"))); // NOI18N
        panelGameBoard.add(blackKing, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 0, 100, 100));

        blackBishopR.setIcon(new javax.swing.ImageIcon(getClass().getResource("/figurky_png/100x100/BB.png"))); // NOI18N
        panelGameBoard.add(blackBishopR, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 0, 100, 100));

        blackKnightR.setIcon(new javax.swing.ImageIcon(getClass().getResource("/figurky_png/100x100/BN.png"))); // NOI18N
        panelGameBoard.add(blackKnightR, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 0, 100, 100));

        blackRookR.setIcon(new javax.swing.ImageIcon(getClass().getResource("/figurky_png/100x100/BR.png"))); // NOI18N
        panelGameBoard.add(blackRookR, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 0, 100, 100));

        lblGameBoard.setIcon(new javax.swing.ImageIcon(getClass().getResource("/figurky_png/boards/woodboard.png"))); // NOI18N
        lblGameBoard.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                lblGameBoardMouseReleased(evt);
            }
        });
        panelGameBoard.add(lblGameBoard, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        panelGameWhiteMiniFigures.setBackground(new java.awt.Color(200, 200, 200));
        panelGameWhiteMiniFigures.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 102, 0), 4));
        panelGameWhiteMiniFigures.setPreferredSize(new java.awt.Dimension(40, 340));
        panelGameWhiteMiniFigures.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        panelGameBoard.add(panelGameWhiteMiniFigures, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 60, 50, 340));

        panelGameBlackMiniFigures.setBackground(new java.awt.Color(200, 200, 200));
        panelGameBlackMiniFigures.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 102, 0), 4));
        panelGameBlackMiniFigures.setPreferredSize(new java.awt.Dimension(40, 340));
        panelGameBlackMiniFigures.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        panelGameBoard.add(panelGameBlackMiniFigures, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 400, 50, 340));

        panelGame.add(panelGameBoard, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 40, 840, 800));

        panelGameRows.setBackground(new java.awt.Color(200, 200, 200));
        panelGameRows.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 102, 0), 4));
        panelGameRows.setPreferredSize(new java.awt.Dimension(40, 780));
        panelGameRows.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblGameRows.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        lblGameRows.setForeground(new java.awt.Color(102, 102, 0));
        lblGameRows.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblGameRows.setText("<html>8<br><br><br><br>7<br><br><br><br>6<br><br><br><br>5<br><br><br><br>4<br><br><br><br>3<br><br><br><br>2<br><br><br><br>1</html>");
        panelGameRows.add(lblGameRows, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 0, 30, 780));

        panelGame.add(panelGameRows, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 50, 50, -1));

        panelGameColumns.setBackground(new java.awt.Color(200, 200, 200));
        panelGameColumns.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 102, 0), 4));
        panelGameColumns.setPreferredSize(new java.awt.Dimension(780, 40));
        panelGameColumns.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblGameColumns.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        lblGameColumns.setForeground(new java.awt.Color(102, 102, 0));
        lblGameColumns.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblGameColumns.setText("A              B              C              D              E              F              G              H");
        panelGameColumns.add(lblGameColumns, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 10, 780, 40));

        panelGame.add(panelGameColumns, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 830, -1, 50));

        panelGameDialog.setBackground(new java.awt.Color(200, 200, 200));
        panelGameDialog.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 102, 0), 4));
        panelGameDialog.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        txtGameMoveHistory.setFont(new java.awt.Font("Monospaced", 1, 34)); // NOI18N
        txtGameMoveHistory.setFocusable(false);
        scrollGameMoveHistory.setViewportView(txtGameMoveHistory);

        panelGameDialog.add(scrollGameMoveHistory, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 170, 340, 390));

        lblGameMoveHistory.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        lblGameMoveHistory.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblGameMoveHistory.setText("Move history:");
        panelGameDialog.add(lblGameMoveHistory, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 140, 340, -1));

        comboGameBoardColor.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        comboGameBoardColor.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Default", "Blue", "Brown", "Green", "Grey", "Red" }));
        comboGameBoardColor.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboGameBoardColorItemStateChanged(evt);
            }
        });
        panelGameDialog.add(comboGameBoardColor, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 60, 200, 40));

        lblGameBoardColor.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        lblGameBoardColor.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblGameBoardColor.setText("Customize board");
        panelGameDialog.add(lblGameBoardColor, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, 380, -1));

        panelGame.add(panelGameDialog, new org.netbeans.lib.awtextra.AbsoluteConstraints(950, 100, 420, 600));

        panelGameOpponentInfo.setBackground(new java.awt.Color(200, 200, 200));
        panelGameOpponentInfo.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblGameOpponentInfo.setBackground(new java.awt.Color(0, 0, 0));
        lblGameOpponentInfo.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        lblGameOpponentInfo.setForeground(new java.awt.Color(50, 210, 50));
        lblGameOpponentInfo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblGameOpponentInfo.setText("127.0.0.1");
        panelGameOpponentInfo.add(lblGameOpponentInfo, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 270, 20));

        panelGame.add(panelGameOpponentInfo, new org.netbeans.lib.awtextra.AbsoluteConstraints(950, 30, 290, 40));

        btnOfferDraw.setBackground(new java.awt.Color(175, 175, 175));
        btnOfferDraw.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        btnOfferDraw.setForeground(new java.awt.Color(100, 100, 100));
        btnOfferDraw.setText("Offer draw");
        btnOfferDraw.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(102, 102, 0), 4, true));
        btnOfferDraw.setPreferredSize(new java.awt.Dimension(250, 60));
        panelGame.add(btnOfferDraw, new org.netbeans.lib.awtextra.AbsoluteConstraints(1120, 720, -1, -1));

        btnSurrender.setBackground(new java.awt.Color(175, 175, 175));
        btnSurrender.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        btnSurrender.setForeground(new java.awt.Color(153, 0, 0));
        btnSurrender.setText("Surrender");
        btnSurrender.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(102, 102, 0), 4, true));
        btnSurrender.setPreferredSize(new java.awt.Dimension(250, 60));
        panelGame.add(btnSurrender, new org.netbeans.lib.awtextra.AbsoluteConstraints(1120, 790, -1, -1));

        jLayeredPane1.add(panelGame, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        panelInit.setBackground(new java.awt.Color(0, 40, 60));
        panelInit.setPreferredSize(new java.awt.Dimension(1400, 900));
        panelInit.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        txtOpponentsIP.setBackground(new java.awt.Color(200, 200, 200));
        txtOpponentsIP.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        txtOpponentsIP.setForeground(new java.awt.Color(102, 102, 0));
        txtOpponentsIP.setPreferredSize(new java.awt.Dimension(320, 50));
        panelInit.add(txtOpponentsIP, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 460, 320, 50));

        lblInitEnterIP.setBackground(new java.awt.Color(200, 200, 200));
        lblInitEnterIP.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        lblInitEnterIP.setForeground(new java.awt.Color(200, 200, 200));
        lblInitEnterIP.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblInitEnterIP.setText("Enter opponent's IP address:");
        panelInit.add(lblInitEnterIP, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 400, 600, -1));

        btnInitRules.setBackground(new java.awt.Color(175, 175, 175));
        btnInitRules.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        btnInitRules.setForeground(new java.awt.Color(102, 102, 0));
        btnInitRules.setText("Rules");
        btnInitRules.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                btnInitRulesMouseReleased(evt);
            }
        });
        panelInit.add(btnInitRules, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 780, 320, 60));

        btnIintCreateGame.setBackground(new java.awt.Color(175, 175, 175));
        btnIintCreateGame.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        btnIintCreateGame.setForeground(new java.awt.Color(102, 102, 0));
        btnIintCreateGame.setText("Create game");
        btnIintCreateGame.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                btnIintCreateGameMouseReleased(evt);
            }
        });
        panelInit.add(btnIintCreateGame, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 550, 320, 60));

        btnInitPlayOffline.setBackground(new java.awt.Color(175, 175, 175));
        btnInitPlayOffline.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        btnInitPlayOffline.setForeground(new java.awt.Color(102, 102, 0));
        btnInitPlayOffline.setText("Play offline game");
        btnInitPlayOffline.setPreferredSize(new java.awt.Dimension(380, 60));
        btnInitPlayOffline.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                btnInitPlayOfflineMouseReleased(evt);
            }
        });
        panelInit.add(btnInitPlayOffline, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 660, 380, 60));

        btnInitJoinGame.setBackground(new java.awt.Color(175, 175, 175));
        btnInitJoinGame.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        btnInitJoinGame.setForeground(new java.awt.Color(102, 102, 0));
        btnInitJoinGame.setText("Join game");
        btnInitJoinGame.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                btnInitJoinGameMouseReleased(evt);
            }
        });
        panelInit.add(btnInitJoinGame, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 550, 320, 60));

        lblInitGameName.setFont(new java.awt.Font("Tahoma", 2, 36)); // NOI18N
        lblInitGameName.setForeground(new java.awt.Color(102, 102, 0));
        lblInitGameName.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblInitGameName.setText(" Online Multiplayer Game Of Chess ");
        panelInit.add(lblInitGameName, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 270, 600, -1));

        lblInitGameShortcut.setFont(new java.awt.Font("Tahoma", 1, 150)); // NOI18N
        lblInitGameShortcut.setForeground(new java.awt.Color(102, 102, 0));
        lblInitGameShortcut.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblInitGameShortcut.setText("OMGOC");
        lblInitGameShortcut.setPreferredSize(new java.awt.Dimension(700, 200));
        panelInit.add(lblInitGameShortcut, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 70, -1, -1));

        jLayeredPane1.add(panelInit, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        getContentPane().add(jLayeredPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void lblGameBoardMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblGameBoardMouseReleased
        // TODO add your handling code here:

        performMove(xyToOne(evt.getX() / 100, evt.getY() / 100), true);
        /*
        if (selectedFigure == null) {                                           //if none figure is selected return
            return;
        }
        int sector = xyToOne(evt.getX() / 100, evt.getY() / 100);               //sector of tile where mouse clicked
        //get Move object
        Move move = Move.MoveFactory.createMove(board, xyToOne(selectedFigure.getX() / 100, selectedFigure.getY() / 100), sector);
        PerformMove perfMove = board.getCurrentPlayer().makeMove(move);         //perform move

        //if it is a valid move
        if (perfMove.getMoveStatus() == PerformMove.MoveStatus.DONE) {

            moveHistory.add(move);                                              //put move to history

            if (move.isAttack()) {                                              //if it is a attack move, eliminate attacked figure
                JLabel attackedFigure = getLabelBySector(sector);               //get JLabel of figure by sector
                if (attackedFigure == null) {
                    throw new RuntimeException("Mismatch between game logic attacked piece and GUI attacked piece");
                }
                eliminateFigure(attackedFigure, !isWhite);                      //eliminate figure
            }

            //get possible moves
            List<Integer> posMoves = getPossibleMoves(board, xyToOne(selectedFigure.getX() / 100, selectedFigure.getY() / 100));

            //move figure
            moveFigure(selectedFigure, xyToOne(evt.getX() / 100, evt.getY() / 100), posMoves);

            if (move.isCastlingMove()) {
                int rookPosition = ((CastlingMove) move).getCastlingRook().getPosition();
                int destRookPos = ((CastlingMove) move).getRookDestination();
                JLabel movedRook = getCastlingRook(sector);
                moveFigure(movedRook, destRookPos, List.of(destRookPos));
            }

            Board boardBeforeMove = board;
            board = perfMove.getMakeMoveBoard();
            printMove(move, boardBeforeMove);                                   //print Moves toString representation

            if (board.getCurrentPlayer().isInCheck()) {                         //if i get opponents king in check
                checkKing(!isWhite);                                            //show red King figure
            } else {                                                            //opponents king is not in check
                uncheckKings();                                                 //set default images to both kings
            }
            if (board.getCurrentPlayer().isStalemate()) {                       //stalemate
                JOptionPane.showMessageDialog(null, "Stalemate!");
                new MainWindow().setVisible(true);
                this.dispose();
            }
            if (board.getCurrentPlayer().isInCheckMate()) {                     //checkmate
                if (board.getCurrentPlayer().getPlayerSide() == Side.WHITE) {
                    JOptionPane.showMessageDialog(null, "Checkmate!\nWhite player wins");
                } else {
                    JOptionPane.showMessageDialog(null, "Checkmate!\nBlack player wins");
                }
//                showInit();
                new MainWindow().setVisible(true);
                this.dispose();
            }
            System.err.println("TODO: Add moves history");
            switchSides();
        }*/
    }//GEN-LAST:event_lblGameBoardMouseReleased

    private void comboGameBoardColorItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboGameBoardColorItemStateChanged
        // TODO add your handling code here:
        if (comboGameBoardColor.getSelectedItem() == null) {
            return;
        }
        String color = comboGameBoardColor.getSelectedItem().toString();
        if (color == null) {
            return;
        }
        switch (color) {
            case "Default":
            case "Východzia":
                lblGameBoard.setIcon(new ImageIcon(Paths.get("src", "figurky_png", "boards", "woodboard.png").toString()));
                break;
            case "Blue":
            case "Modrá":
                lblGameBoard.setIcon(new ImageIcon(Paths.get("src", "figurky_png", "boards", "blueboard.png").toString()));
                break;
            case "Brown":
            case "Hnedá":
                lblGameBoard.setIcon(new ImageIcon(Paths.get("src", "figurky_png", "boards", "brownboard.png").toString()));
                break;
            case "Green":
            case "Zelená":
                lblGameBoard.setIcon(new ImageIcon(Paths.get("src", "figurky_png", "boards", "greenboard.png").toString()));
                break;
            case "Grey":
            case "Šedá":
                lblGameBoard.setIcon(new ImageIcon(Paths.get("src", "figurky_png", "boards", "greyboard.png").toString()));
                break;
            case "Red":
            case "Červená":
                lblGameBoard.setIcon(new ImageIcon(Paths.get("src", "figurky_png", "boards", "redboard.png").toString()));
                break;
            default:
                lblGameBoard.setIcon(new ImageIcon(Paths.get("src", "figurky_png", "boards", "woodboard.png").toString()));
        }
    }//GEN-LAST:event_comboGameBoardColorItemStateChanged

    private void btnLanguageENMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnLanguageENMouseReleased
        // TODO add your handling code here:
        locale = Locale.ENGLISH;
        bundle = ResourceBundle.getBundle("sk.stu.fiit.resources/resources", Locale.ROOT);
        updateLocaleTexts();
//        panelGame.setVisible(false);
//        panelInit.setVisible(true);
    }//GEN-LAST:event_btnLanguageENMouseReleased

    private void btnLanguageSKMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnLanguageSKMouseReleased
        // TODO add your handling code here:
        locale = new Locale("sk", "SK");
        bundle = ResourceBundle.getBundle("sk.stu.fiit.resources/resources", locale);
        updateLocaleTexts();
//        panelGame.setVisible(true);
//        panelInit.setVisible(false);
    }//GEN-LAST:event_btnLanguageSKMouseReleased

    private void btnInitRulesMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnInitRulesMouseReleased
        // TODO add your handling code here:
        new Tips_And_Rules().setVisible(true);
    }//GEN-LAST:event_btnInitRulesMouseReleased

    private void btnIintCreateGameMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnIintCreateGameMouseReleased
        // TODO add your handling code here:
////        board initialization
//        board = Board.createStartBoard();
//        isWhite = true;
//
//        host = new Host(this, false);
//        lblLocalIP.setText(host.getLocalIp().toString().replace('/', ' '));
//        showGame();
//        host.setActive(true);
//        host.startListener();
        initializeGame(true, true);
    }//GEN-LAST:event_btnIintCreateGameMouseReleased

    private void btnInitJoinGameMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnInitJoinGameMouseReleased
        // TODO add your handling code here:
//        guest = new Guest(this);
//        String ip = txtOpponentsIP.getText();
//        if (!checkInputIP(ip)) {    //if IP is valid, sets hostIP
//            return;                 //if IP is invalid return
//        }
//        guest.setFen("Initial greeting");
//        guest.startSender();
//        showGame();
        initializeGame(true, false);
    }//GEN-LAST:event_btnInitJoinGameMouseReleased

    private void btnInitPlayOfflineMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnInitPlayOfflineMouseReleased
        // TODO add your handling code here:
        initializeGame(false, true);
    }//GEN-LAST:event_btnInitPlayOfflineMouseReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainWindow().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel blackBishopL;
    private javax.swing.JLabel blackBishopR;
    private javax.swing.JLabel blackKing;
    private javax.swing.JLabel blackKnightL;
    private javax.swing.JLabel blackKnightR;
    private javax.swing.JLabel blackPawnA;
    private javax.swing.JLabel blackPawnB;
    private javax.swing.JLabel blackPawnC;
    private javax.swing.JLabel blackPawnD;
    private javax.swing.JLabel blackPawnE;
    private javax.swing.JLabel blackPawnF;
    private javax.swing.JLabel blackPawnG;
    private javax.swing.JLabel blackPawnH;
    private javax.swing.JLabel blackQueen;
    private javax.swing.JLabel blackRookL;
    private javax.swing.JLabel blackRookR;
    private javax.swing.JButton btnIintCreateGame;
    private javax.swing.JButton btnInitJoinGame;
    private javax.swing.JButton btnInitPlayOffline;
    private javax.swing.JButton btnInitRules;
    private javax.swing.JButton btnLanguageEN;
    private javax.swing.JButton btnLanguageSK;
    private javax.swing.JButton btnOfferDraw;
    private javax.swing.JButton btnSurrender;
    private javax.swing.JComboBox<String> comboGameBoardColor;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JLabel lblGameBoard;
    private javax.swing.JLabel lblGameBoardColor;
    private javax.swing.JLabel lblGameColumns;
    private javax.swing.JLabel lblGameMoveHistory;
    private javax.swing.JLabel lblGameOpponentInfo;
    private javax.swing.JLabel lblGameRows;
    private javax.swing.JLabel lblInitEnterIP;
    private javax.swing.JLabel lblInitGameName;
    private javax.swing.JLabel lblInitGameShortcut;
    private javax.swing.JLabel lblLocalIP;
    private javax.swing.JPanel panelGame;
    private javax.swing.JPanel panelGameBlackMiniFigures;
    private javax.swing.JPanel panelGameBoard;
    private javax.swing.JPanel panelGameColumns;
    private javax.swing.JPanel panelGameDialog;
    private javax.swing.JPanel panelGameOpponentInfo;
    private javax.swing.JPanel panelGameRows;
    private javax.swing.JPanel panelGameWhiteMiniFigures;
    private javax.swing.JPanel panelInit;
    private javax.swing.JPanel panelLanguage;
    private javax.swing.JScrollPane scrollGameMoveHistory;
    private javax.swing.JTextPane txtGameMoveHistory;
    private javax.swing.JTextField txtOpponentsIP;
    private javax.swing.JLabel whiteBishopL;
    private javax.swing.JLabel whiteBishopR;
    private javax.swing.JLabel whiteKing;
    private javax.swing.JLabel whiteKnightL;
    private javax.swing.JLabel whiteKnightR;
    private javax.swing.JLabel whitePawnA;
    private javax.swing.JLabel whitePawnB;
    private javax.swing.JLabel whitePawnC;
    private javax.swing.JLabel whitePawnD;
    private javax.swing.JLabel whitePawnE;
    private javax.swing.JLabel whitePawnF;
    private javax.swing.JLabel whitePawnG;
    private javax.swing.JLabel whitePawnH;
    private javax.swing.JLabel whiteQueen;
    private javax.swing.JLabel whiteRookL;
    private javax.swing.JLabel whiteRookR;
    // End of variables declaration//GEN-END:variables

    public void showGame() {
        panelInit.setVisible(false);
        panelGame.setVisible(true);
    }

    private void showInit() {
        panelInit.setVisible(true);
        panelGame.setVisible(false);
    }

    private void performMove(int sector, boolean isSending) {
        //if none figure is selected return
        if (selectedFigure == null) {
            return;
        }

        //get Move object
        Move move = Move.MoveFactory.createMove(board, xyToOne(selectedFigure.getX() / 100, selectedFigure.getY() / 100), sector);
        //perform move
        PerformMove perfMove = board.getCurrentPlayer().makeMove(move);

        //if it is a valid move
        if (perfMove.getMoveStatus() == PerformMove.MoveStatus.DONE) {

            moveHistory.add(move);                                              //add move to history

            //get possible moves
            List<Integer> posMoves = getPossibleMoves(board, xyToOne(selectedFigure.getX() / 100, selectedFigure.getY() / 100));

            //Attack move
            if (move.isAttack()) {
                JLabel attackedFigure = getLabelBySector(sector);               //get JLabel of figure by sector
                if (move instanceof Move.EnPassantMove) {
                    attackedFigure = isWhite ? getLabelBySector(sector + 8) : getLabelBySector(sector - 8);
                } else if (attackedFigure == null) {
                    throw new RuntimeException("Mismatch between game logic attacked piece and GUI attacked piece");
                }
                eliminateFigure(attackedFigure, !isWhite);                      //eliminate figure
            }

            //Castling move
            if (move.isCastlingMove()) {
                int rookPosition = ((CastlingMove) move).getCastlingRook().getPosition();
                int destRookPos = ((CastlingMove) move).getRookDestination();
                JLabel movedRook = getCastlingRook(sector);
                JLabel tempSelected = selectedFigure;
                moveFigure(movedRook, destRookPos, List.of(destRookPos));
                selectedFigure = tempSelected;
            }

            Board boardBeforeMove = board;
            board = perfMove.getMakeMoveBoard();

            //Promotion
            if (move instanceof Promotion) {
                this.promotionPiece = getPromoted(sector, isWhite ? Side.WHITE : Side.BLACK);
                promoteSelectedFigureIcon(selectedFigure, promotionPiece);
                board = board.createPromotionBoard(board, move.getDestinationCoordinate(), promotionPiece);
                System.err.println("TO-DO add move printing of promotion move");
            }

            //print move to side board
            printMove(move, boardBeforeMove);
            //move figure
            moveFigure(selectedFigure, sector, posMoves);

            //Check
            if (board.getCurrentPlayer().isInCheck()) {
                checkKing((board.getCurrentPlayer().getPlayerSide() == Side.WHITE));           //!isWhite                                 //show red King figure
            } else {
                uncheckKings();                                                 //set default images to both kings
            }
            //Stalemate
            if (board.getCurrentPlayer().isStalemate() || board.kingsOnly()) {
                JOptionPane.showMessageDialog(null, "Draw!");
                new MainWindow().setVisible(true);
                this.dispose();
            }
            //Checkmate
            if (board.getCurrentPlayer().isInCheckMate()) {
                if (board.getCurrentPlayer().getPlayerSide() == Side.WHITE) {
                    JOptionPane.showMessageDialog(null, "Checkmate!\nBlack player wins");
                } else {
                    JOptionPane.showMessageDialog(null, "Checkmate!\nWhite player wins");
                }

                //start new game
                new MainWindow().setVisible(true);
                this.dispose();
            }

            if (isOnline) {
                if (isSending) {
                    removeMouseListeners(isWhite);
                    user.setFen(board.toString());
                    user.sendFen();
//                    user.startSender();
                }
            } else {
                switchSides();
            }
        }
    }

    public Piece getPromoted(int position, Side side) {
        String[] options = {bundle.getString("QUEEN"),
            bundle.getString("KNIGHT"),
            bundle.getString("BISHOP"),
            bundle.getString("ROOK")};
        int x = JOptionPane.showOptionDialog(null, bundle.getString("CHOOSE_PROMOTION"),
                "PROMOTION",
                JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE, null, options, options[0]);
        switch (x) {
            case 0:
                return new Queen(position, side, false);
            case 1:
                return new Knight(position, side, false);
            case 2:
                return new Bishop(position, side, false);
            case 3:
                return new Rook(position, side, false);
            default:
                return new Queen(position, side, false);
        }
    }

    /**
     * Resets inital coordinates of positions where eliminated figures are put
     */
    private void resetElimPosValues() {
        nextPosBlackElim[0] = 810;
        nextPosBlackElim[1] = 70;
        nextPosWhiteElim[0] = 810;
        nextPosWhiteElim[1] = 710;
    }

    private void resetFiguresPosition() {
        new MainWindow().setVisible(true);
        this.dispose();
        List<JLabel> figures = List.of(whitePawnA, whitePawnB, whitePawnC, whitePawnD, whitePawnE, whitePawnF, whitePawnG, whitePawnH,
                whiteRookL, whiteRookR, whiteKnightL, whiteKnightR, whiteBishopL, whiteBishopR, whiteQueen, whiteKing,
                blackPawnA, blackPawnB, blackPawnC, blackPawnD, blackPawnE, blackPawnF, blackPawnG, blackPawnH,
                blackRookL, blackRookR, blackKnightL, blackKnightR, blackBishopL, blackBishopR, blackQueen, blackKing);
        figures.stream()
                .forEach(figure -> rescale((ImageIcon) figure.getIcon(), 100, 100));

        blackPawnA.setBounds(0, 100, 100, 100);
        blackPawnB.setBounds(100, 100, 100, 100);
        blackPawnC.setBounds(200, 100, 100, 100);
        blackPawnD.setBounds(300, 100, 100, 100);
        blackPawnE.setBounds(400, 100, 100, 100);
        blackPawnF.setBounds(500, 100, 100, 100);
        blackPawnG.setBounds(600, 100, 100, 100);
        blackPawnH.setBounds(700, 100, 100, 100);
        blackRookL.setBounds(0, 0, 100, 100);
        blackKnightL.setBounds(100, 0, 100, 100);
        blackBishopL.setBounds(200, 0, 100, 100);
        blackQueen.setBounds(300, 0, 100, 100);
        blackKing.setBounds(400, 0, 100, 100);
        blackBishopR.setBounds(500, 0, 100, 100);
        blackKnightR.setBounds(600, 0, 100, 100);
        blackRookR.setBounds(700, 0, 100, 100);

        whitePawnA.setBounds(0, 600, 100, 100);
        whitePawnB.setBounds(100, 600, 100, 100);
        whitePawnC.setBounds(200, 600, 100, 100);
        whitePawnD.setBounds(300, 600, 100, 100);
        whitePawnE.setBounds(400, 600, 100, 100);
        whitePawnF.setBounds(500, 600, 100, 100);
        whitePawnG.setBounds(600, 600, 100, 100);
        whitePawnH.setBounds(700, 600, 100, 100);
        whiteRookL.setBounds(0, 700, 100, 100);
        whiteKnightL.setBounds(100, 700, 100, 100);
        whiteBishopL.setBounds(200, 700, 100, 100);
        whiteQueen.setBounds(300, 700, 100, 100);
        whiteKing.setBounds(400, 700, 100, 100);
        whiteBishopR.setBounds(500, 700, 100, 100);
        whiteKnightR.setBounds(600, 700, 100, 100);
        whiteRookR.setBounds(700, 700, 100, 100);

        blackPawnA.setIcon(new ImageIcon(Paths.get("src", "figurky_png", "100x100", "BP.png").toString()));
        blackPawnB.setIcon(new ImageIcon(Paths.get("src", "figurky_png", "100x100", "BP.png").toString()));
        blackPawnC.setIcon(new ImageIcon(Paths.get("src", "figurky_png", "100x100", "BP.png").toString()));
        blackPawnD.setIcon(new ImageIcon(Paths.get("src", "figurky_png", "100x100", "BP.png").toString()));
        blackPawnE.setIcon(new ImageIcon(Paths.get("src", "figurky_png", "100x100", "BP.png").toString()));
        blackPawnF.setIcon(new ImageIcon(Paths.get("src", "figurky_png", "100x100", "BP.png").toString()));
        blackPawnG.setIcon(new ImageIcon(Paths.get("src", "figurky_png", "100x100", "BP.png").toString()));
        blackPawnH.setIcon(new ImageIcon(Paths.get("src", "figurky_png", "100x100", "BP.png").toString()));
        blackRookL.setIcon(new ImageIcon(Paths.get("src", "figurky_png", "100x100", "BR.png").toString()));
        blackKnightL.setIcon(new ImageIcon(Paths.get("src", "figurky_png", "100x100", "BN.png").toString()));
        blackBishopL.setIcon(new ImageIcon(Paths.get("src", "figurky_png", "100x100", "BB.png").toString()));
        blackQueen.setIcon(new ImageIcon(Paths.get("src", "figurky_png", "100x100", "BQ.png").toString()));
        blackKing.setIcon(new ImageIcon(Paths.get("src", "figurky_png", "100x100", "BK.png").toString()));
        blackBishopR.setIcon(new ImageIcon(Paths.get("src", "figurky_png", "100x100", "BB.png").toString()));
        blackKnightR.setIcon(new ImageIcon(Paths.get("src", "figurky_png", "100x100", "BN.png").toString()));
        blackRookR.setIcon(new ImageIcon(Paths.get("src", "figurky_png", "100x100", "BR.png").toString()));

        whitePawnA.setIcon(new ImageIcon(Paths.get("src", "figurky_png", "100x100", "WP.png").toString()));
        whitePawnB.setIcon(new ImageIcon(Paths.get("src", "figurky_png", "100x100", "WP.png").toString()));
        whitePawnC.setIcon(new ImageIcon(Paths.get("src", "figurky_png", "100x100", "WP.png").toString()));
        whitePawnD.setIcon(new ImageIcon(Paths.get("src", "figurky_png", "100x100", "WP.png").toString()));
        whitePawnE.setIcon(new ImageIcon(Paths.get("src", "figurky_png", "100x100", "WP.png").toString()));
        whitePawnF.setIcon(new ImageIcon(Paths.get("src", "figurky_png", "100x100", "WP.png").toString()));
        whitePawnG.setIcon(new ImageIcon(Paths.get("src", "figurky_png", "100x100", "WP.png").toString()));
        whitePawnH.setIcon(new ImageIcon(Paths.get("src", "figurky_png", "100x100", "WP.png").toString()));
        whiteRookL.setIcon(new ImageIcon(Paths.get("src", "figurky_png", "100x100", "WR.png").toString()));
        whiteKnightL.setIcon(new ImageIcon(Paths.get("src", "figurky_png", "100x100", "WN.png").toString()));
        whiteBishopL.setIcon(new ImageIcon(Paths.get("src", "figurky_png", "100x100", "WB.png").toString()));
        whiteQueen.setIcon(new ImageIcon(Paths.get("src", "figurky_png", "100x100", "WQ.png").toString()));
        whiteKing.setIcon(new ImageIcon(Paths.get("src", "figurky_png", "100x100", "WK.png").toString()));
        whiteBishopR.setIcon(new ImageIcon(Paths.get("src", "figurky_png", "100x100", "WB.png").toString()));
        whiteKnightR.setIcon(new ImageIcon(Paths.get("src", "figurky_png", "100x100", "WN.png").toString()));
        whiteRookR.setIcon(new ImageIcon(Paths.get("src", "figurky_png", "100x100", "WR.png").toString()));
    }

    /**
     * Creates new start board. Sets this player color according to parameter
     * isWhite. Creates new Host/Guest, starts Listener/Sender thread. Checks IP
     * validity.
     *
     * @param online
     * @param isWhite
     */
    private void initializeGame(boolean online, boolean isWhite) {
        //        board initialization
        board = Board.createStartBoard();
        this.isWhite = isWhite;
        this.isOnline = online;

        if (online) {
            if (isWhite) {                  //if isWhite is true, it means that we are host
//                host = new Host(this, false);
                user = new SocketUser(this, SocketUser.PlayerType.HOST);
//                addMouseListeners(true);
//                host.setActive(true);
                user.setActive(true);
//                host.startListener();
                user.host();
            } else {                        //we are guest
//                guest = new Guest(this);
                user = new SocketUser(this, SocketUser.PlayerType.GUEST);
                String ip = txtOpponentsIP.getText();
                if (!checkInputIP(ip)) {    //if IP is valid, sets hostIP
                    user = null;
                    return;                 //if IP is invalid return
                }
//                addMouseListeners(false);
                removeMouseListeners(false);
                user.setActive(true);
                user.setFen("Init");
//                user.startSender();        //send initial message to start game
                user.guest();
//                try {
//                    Thread.sleep(400);
//                } catch (InterruptedException ex) {
//                    System.err.println("Doplnit logger");
//                    ex.printStackTrace();
//                    return;
//                }
//                user.startListener();
            }
        } else {
            addMouseListeners(true);
        }
        showGame();
    }

    /**
     *
     * @param sector Number of sector where should be located desired figure
     * @return {@link JLabel JLabel} of figure that is located on particular
     * sector. Null if there is not any Figure
     */
    private JLabel getLabelBySector(int sector) {
        List<JLabel> figures;

        figures = List.of(whitePawnA, whitePawnB, whitePawnC, whitePawnD, whitePawnE, whitePawnF, whitePawnG, whitePawnH,
                whiteRookL, whiteRookR, whiteKnightL, whiteKnightR, whiteBishopL, whiteBishopR, whiteQueen, whiteKing,
                blackPawnA, blackPawnB, blackPawnC, blackPawnD, blackPawnE, blackPawnF, blackPawnG, blackPawnH,
                blackRookL, blackRookR, blackKnightL, blackKnightR, blackBishopL, blackBishopR, blackQueen, blackKing);

        for (JLabel figure : figures) {
            if (xyToOne(figure.getX() / 100, figure.getY() / 100) == sector) {
                return figure;
            }
        }
        return null;
    }

    /**
     * Rescales {@link ImageIcon ImageIcon} of {@link JLabel label} of figure
     * and change its location to side panel
     *
     * @param figure {@link JLabel JLabel} of figure to be eliminated
     * @param isWhite true if eliminated figure was white
     */
    private void eliminateFigure(JLabel figure, boolean isWhite) {
        figure.setIcon(rescale((ImageIcon) figure.getIcon(), 20, 20));
        if (isWhite) {
            figure.setBounds(nextPosWhiteElim[0], nextPosWhiteElim[1], 20, 20);
            nextPosWhiteElim[1] -= 20;
        } else {
            figure.setBounds(nextPosBlackElim[0], nextPosBlackElim[1], 20, 20);
            nextPosBlackElim[1] += 20;
        }
    }

    /**
     * Rescales {@link ImageIcon ImageIcon} to fit new size
     *
     * @param i {@link ImageIcon ImageIcon} to be rescaled
     * @param width new width of image
     * @param height new height of image
     * @return rescaled {@link ImageIcon ImageIcon}
     */
    private ImageIcon rescale(ImageIcon i, int width, int height) {
        Image image = i.getImage();
        Image newImage = image.getScaledInstance(width, height, java.awt.Image.SCALE_SMOOTH);
        return new ImageIcon(newImage);
    }

    private void promoteSelectedFigureIcon(JLabel figure, Piece piece) {
        if (figure == null) {
            return;
        }
        if (piece instanceof Queen) {
            figure.setIcon(new ImageIcon(Paths.get("src", "figurky_png", "100x100", isWhite ? "WQ.png" : "BQ.png").toString()));
        } else if (piece instanceof Bishop) {
            figure.setIcon(new ImageIcon(Paths.get("src", "figurky_png", "100x100", isWhite ? "WB.png" : "BB.png").toString()));
        } else if (piece instanceof Knight) {
            figure.setIcon(new ImageIcon(Paths.get("src", "figurky_png", "100x100", isWhite ? "WN.png" : "BN.png").toString()));
        } else if (piece instanceof Rook) {
            figure.setIcon(new ImageIcon(Paths.get("src", "figurky_png", "100x100", isWhite ? "WR.png" : "BR.png").toString()));
        } else {
            System.err.println("Zle nedobre");
        }
        this.repaint();
    }

    /**
     * Converts x, y representation of gameboard to one-numbered sector
     * representation
     *
     * @param x column number
     * @param y row number
     * @return number of sector
     */
    public static int xyToOne(int x, int y) {
        return x + y * 8;
    }

    /**
     * Converts one-numbered representation of gameboard to x, y representation
     *
     * @param one number of sector
     * @return int array [x, y]
     */
    public static int[] oneToxy(int one) {
        int[] xy = {one % 8, one / 8};
        return xy;
    }

    @TemporaryForTesting
    public void test(List<Integer> sectors) {
        btnLanguageSKMouseReleased(null);
        if ((int) sectors.get(0) % 2 == 0) {
            showPossibleMoves(whiteQueen);
        } else {
            showPossibleMoves(whiteKing);
        }
    }

    /**
     * Creates dots of {@link JLabel JLabels} on fileds where figure can
     * possibly move
     *
     * @param figure {@link JLabel label} of selected figure
     * @param sectors {@link List List<int>} of sectors where figure can
     * possibly move
     */
    private void showPossibleMoves(JLabel figure) {
        if (selectedFigure == null) {
            selectedFigure = figure;
        } else if (selectedFigure.equals(figure)) {
            removePossibleMoves();
            return;
        } else {
            removePossibleMoves();
            selectedFigure = figure;
        }
//        convert Move objects to int representation of sectors
        List<Integer> possibleSectors = getPossibleMoves(board, xyToOne(figure.getX() / 100, figure.getY() / 100));
        possibleSectors.stream()
                .forEach(i -> System.out.println(i));
//        List<Integer> possibleSectors = board.getAllLegalMoves().stream()
//                .filter(move -> move.getMovedPiece().getPosition() == xyToOne(figure.getX() / 100, figure.getY() / 100))
//                .map(move -> move.getDestinationCoordinate())
//                .collect(Collectors.toList());

//        function to create new dot for every sector in list
        Function<Integer, JLabel> function = (sector) -> {
            JLabel label = new JLabel();
            panelGameBoard.add(label, 0);
            label.setIcon(new ImageIcon(Path.of("src", "figurky_png", "100x100", "dot.png").toString()));
            int x = oneToxy(sector)[0];
            int y = oneToxy(sector)[1];
            label.setBounds(x * 100, y * 100, 100, 100);
            label.setVisible(true);
            return label;
        };

        dots = (List<JLabel>) possibleSectors.stream().map(function).collect(Collectors.toList());

    }

    /**
     * Removes all dots of possible moves. Removes all labels from
     * {@link JPanel panelGameBoard}. Clears field {@link Map dots}
     */
    public void removePossibleMoves() {

        if (dots.isEmpty()) {
            return;
        }
        dots.stream().forEach(label -> panelGameBoard.remove(label));
        panelGameBoard.repaint();
        selectedFigure = null;
        dots.clear();
    }

    /**
     * Checks if input ip is valid format 0-255.0-255.0-255.0-255. Regex pattern
     * is from
     * <a href="https://mkyong.com/regular-expressions/how-to-validate-ip-address-with-regular-expression/">here</a>
     *
     * If it is a valid IP, set it to {@link #guest guest's} hostIP
     *
     * @param ip
     * @return
     */
    public boolean checkInputIP(String ip) {
        if (ip == null) {
            return false;
        }
        //check for valid IP format
        Pattern goodIP = Pattern.compile("^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}"
                + "([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$");
        Matcher m = goodIP.matcher(ip);
        if (!m.find()) {
            return false;   //invalid IP input
        }

        //set user's field hostIP
        try {
            user.setOpponentsIP(ip);
        } catch (UnknownHostException ex) {
            System.err.println("Doplnit logger");
            ex.printStackTrace();
            return false;
        }
        return true;
    }

    /**
     * Moves {@link #selectedFigure selected figure} sets it to null and removes
     * dots of possible moves
     *
     * @param figure {@link JLabel figure} to be moved
     * @param sector number of sector to where move the figure
     */
    private void moveFigure(JLabel figure, int sector, List<Integer> possibleMoves) {
        if (!possibleMoves.contains(sector)) {  //check for ability to move to selected sector
            return;
        }
        /*
        check for elimination of opponent's figure
         */
        figure.setLocation(oneToxy(sector)[0] * 100, oneToxy(sector)[1] * 100);
        removePossibleMoves();
    }

    /**
     * Adds ability to move with figures of particular color based on whether
     * parameter isWhite is true or false
     *
     * @param isWhite true for white figures, false for black figures
     */
    public void addMouseListeners(Boolean isWhite) {

        List<JLabel> figures;
        if (isWhite) {
            figures = List.of(whitePawnA, whitePawnB, whitePawnC, whitePawnD, whitePawnE, whitePawnF, whitePawnG, whitePawnH,
                    whiteRookL, whiteRookR, whiteKnightL, whiteKnightR, whiteBishopL, whiteBishopR, whiteQueen, whiteKing);
        } else {
            figures = List.of(blackPawnA, blackPawnB, blackPawnC, blackPawnD, blackPawnE, blackPawnF, blackPawnG, blackPawnH,
                    blackRookL, blackRookR, blackKnightL, blackKnightR, blackBishopL, blackBishopR, blackQueen, blackKing);
        }
//        adds mouse listener to every figure
        figures.stream()
                .forEach(figure -> {
                    figure.addMouseListener(new java.awt.event.MouseAdapter() {
                        @Override
                        public void mouseReleased(java.awt.event.MouseEvent evt) {
                            figureListener(evt);
                        }
                    });
                });

    }

    /**
     * Removes all mouse listeners of figures of particular color based on
     * whether parameter isWhite is true or false
     *
     * @param isWhite true for white figures, false for black figures
     */
    private void removeMouseListeners(Boolean isWhite) {
        List<JLabel> figures;
        if (isWhite) {
            figures = List.of(whitePawnA, whitePawnB, whitePawnC, whitePawnD, whitePawnE, whitePawnF, whitePawnG, whitePawnH,
                    whiteRookL, whiteRookR, whiteKnightL, whiteKnightR, whiteBishopL, whiteBishopR, whiteQueen, whiteKing);
        } else {
            figures = List.of(blackPawnA, blackPawnB, blackPawnC, blackPawnD, blackPawnE, blackPawnF, blackPawnG, blackPawnH,
                    blackRookL, blackRookR, blackKnightL, blackKnightR, blackBishopL, blackBishopR, blackQueen, blackKing);
        }
//        removes mouse listeners
        figures.stream()
                .forEach(figure -> {
                    for (MouseListener listener : figure.getMouseListeners()) {
                        figure.removeMouseListener(listener);
                    }
                });
    }

    /**
     *
     * @param board
     * @param sector number of sector where the figure is located
     * @return List of integers of all passible moves for figure on particular
     * sector
     */
    private List<Integer> getPossibleMoves(Board board, int sector) {
        //        convert Move objects to int representation of sectors
        Predicate<Move> checkCheckOrChekMate = (move) -> {
            PerformMove perfMove = board.getCurrentPlayer().makeMove(move);
            if (perfMove.getMoveStatus() == PerformMove.MoveStatus.KING_IN_CHECK) {
                return false;
            }
            return true;
        };
        return board.getAllLegalMoves().stream()
                .filter(move -> move.getMovedPiece().getPosition() == sector)
                .filter(checkCheckOrChekMate)
                .map(move -> move.getDestinationCoordinate())
                .collect(Collectors.toList());
    }

    /**
     * XORs field {@link #isWhite}. Switches mouse listeners to figures of new
     * color.
     */
    private void switchSides() {
        removeMouseListeners(isWhite);
        //inverts boolean value
        this.isWhite = Boolean.logicalXor(isWhite, true);
        addMouseListeners(isWhite);
    }

    private String completeRound() {
        return isWhite ? " " : "\n";
    }

    private void printMove(Move move, Board boardBeforeMove) {
        //nahradit println move history logikou
        StringBuilder text = new StringBuilder(txtGameMoveHistory.getText());
        if (move instanceof Promotion) {
            text.append(((Promotion) move).toString(promotionPiece));
        } else {
            text.append(move.toString());
        }
        if (board.getCurrentPlayer().isInCheckMate()) {
            System.out.println(move.toString() + "#");
//            text.append(move.toString() + "#" + "\n");
            text.append("#");
            //some "end game" logic, windows etc.
        } else if (board.getCurrentPlayer().isInCheck()) {
            System.out.println(move.toString() + "+");
//            text.append(move.toString() + "+" + "\n");
            text.append("+");
        } else if (board.getCurrentPlayer().isStalemate()) {
            System.out.println(move.toString());
            System.out.println("1/2 - 1/2");
//            text.append(move.toString() + "\n1/2 - 1/2\n");
            text.append("\n1/2 - 1/2\n");
        } else {
            if (move.getMovedPiece().isDuplicatePiece()) {
                boolean possibleDuplicate = false;
                for (Piece piece : boardBeforeMove.getCurrentPlayer().getActivePieces()) {
                    if (piece.getPieceType() == move.getMovedPiece().getPieceType() && piece.getPosition() != move.getMovedPiece().getPosition()) {
                        final Piece secondPiece = piece;
                        for (Move possibleMove : secondPiece.getPossibleMoves(boardBeforeMove)) {
                            if (possibleMove.getDestinationCoordinate() == move.getDestinationCoordinate()) {
                                if (board.getCurrentPlayer().isInCheckMate()) {
                                    System.out.println(move.toStringD() + "#");
//                                    text.append(move.toString() + "#" + "\n");
                                    text.append("#");
                                    //some "end game" logic, windows etc.
                                } else if (board.getCurrentPlayer().isInCheck()) {
                                    System.out.println(move.toStringD() + "+");
//                                    text.append(move.toString() + "+" + "\n");
                                    text.append("+");
                                } else if (board.getCurrentPlayer().isStalemate()) {
                                    System.out.println(move.toStringD());
                                    System.out.println("1/2 - 1/2");
//                                    text.append(move.toString() + "\n1/2 - 1/2\n");
                                    text.append("\n1/2 - 1/2\n");
                                } else {
                                    System.out.println(move.toStringD());
//                                    text.append(move.toString() + "\n");
//                                    text.append("\n");
                                }
                                possibleDuplicate = true;
                                break;
                            }
                        }
                    }
                }
                if (!possibleDuplicate) {
                    System.out.println(move.toString());
//                    text.append(move.toString() + "\n");
//                    text.append("\n");
                }
            } else {
                System.out.println(move.toString());
//                text.append(move.toString() + "\n");
//                text.append("\n");
            }
        }
        text.append(completeRound());
        txtGameMoveHistory.setText(text.toString());
    }

    /**
     * Function called inside figures' listeners. For now only showing possible
     * moves.
     *
     * @param evt
     */
    private void figureListener(java.awt.event.MouseEvent evt) {
        showPossibleMoves((JLabel) evt.getComponent());
    }

    private void checkKing(boolean isWhite) {
        uncheckKings();
        if (isWhite) {
            whiteKing.setIcon(new ImageIcon(Paths.get("src", "figurky_png", "100x100", "WKcheck.png").toString()));
        } else {
            blackKing.setIcon(new ImageIcon(Paths.get("src", "figurky_png", "100x100", "BKcheck.png").toString()));
        }
    }

    private void uncheckKings() {
        whiteKing.setIcon(new ImageIcon(Paths.get("src", "figurky_png", "100x100", "WK.png").toString()));
        blackKing.setIcon(new ImageIcon(Paths.get("src", "figurky_png", "100x100", "BK.png").toString()));
    }

    private JLabel getCastlingRook(int sector) {
        switch (sector) {
            case 2:                                                             //black QueenCastling
                return blackRookL;
            case 6:                                                             //black KingCastling
                return blackRookR;
            case 58:                                                            //white QueenCastling
                return whiteRookL;
            case 62:                                                            //white KingCastling
                return whiteRookR;
        }
        throw new RuntimeException("Where is Rook???");
    }

    private void updateLocaleTexts() {
        lblInitEnterIP.setText(bundle.getString("ENTER_IP"));
        lblGameBoardColor.setText(bundle.getString("CUSTOMIZE_BOARD"));
        lblGameMoveHistory.setText(bundle.getString("MOVE_HISTORY"));
        btnIintCreateGame.setText(bundle.getString("CREATE_GAME"));
        btnInitJoinGame.setText(bundle.getString("JOIN_GAME"));
        btnInitPlayOffline.setText(bundle.getString("PLAY_OFFLINE"));
        btnInitRules.setText(bundle.getString("RULES"));
        btnOfferDraw.setText(bundle.getString("OFFER_PAT"));
        btnSurrender.setText(bundle.getString("SURRENDER"));

        //combobox for board customization
        comboGameBoardColor.removeAllItems();
        comboGameBoardColor.addItem(bundle.getString("DEFAULT"));
        comboGameBoardColor.addItem(bundle.getString("BLUE"));
        comboGameBoardColor.addItem(bundle.getString("BROWN"));
        comboGameBoardColor.addItem(bundle.getString("GREEN"));
        comboGameBoardColor.addItem(bundle.getString("GREY"));
        comboGameBoardColor.addItem(bundle.getString("RED"));
    }

    //<ONLINE STUFF>
    public void actualizeBoardFromFen(String fen) {
        Board newBoard = board.boardFromString(fen);
        Set<Integer> oldFigures;
        Set<Integer> newFigures;
        int start;
        int destination;
        if (isWhite) {
            oldFigures = List.copyOf(board.getBlackPieces()).stream()
                    .map(piece -> piece.getPosition())
                    .collect(Collectors.toSet());
            newFigures = List.copyOf(newBoard.getBlackPieces()).stream()
                    .map(piece -> piece.getPosition())
                    .collect(Collectors.toSet());
        } else {
            oldFigures = List.copyOf(board.getWhitePieces()).stream()
                    .map(piece -> piece.getPosition())
                    .collect(Collectors.toSet());
            newFigures = List.copyOf(newBoard.getWhitePieces()).stream()
                    .map(piece -> piece.getPosition())
                    .collect(Collectors.toSet());
        }
        start = oldFigures.stream()
                .filter(oldPos -> newFigures.add(oldPos))
                .findFirst().orElse(-1);
        destination = newFigures.stream()
                .filter(newPos -> oldFigures.add(newPos))
                .findFirst().orElse(-1);
        if (start == -1 || destination == -1) {
            throw new RuntimeException("Unable to find move");
        }

        selectedFigure = getLabelBySector(start);
        performMove(destination, false);
        addMouseListeners(isWhite);
    }

    //<ONLINE STUFF/>
    @Retention(RetentionPolicy.SOURCE)
    @Target(ElementType.METHOD)
    public static @interface TemporaryForTesting {
    }
}
