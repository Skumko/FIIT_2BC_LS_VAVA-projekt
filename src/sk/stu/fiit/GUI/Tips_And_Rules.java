/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package sk.stu.fiit.GUI;

/**
 *
 * @author matba
 */
public class Tips_And_Rules extends javax.swing.JFrame {

    /**
     * Creates new form Tips_And_Rules
     */
    public Tips_And_Rules() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(816, 839));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setPreferredSize(new java.awt.Dimension(800, 800));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTextPane1.setText("Krok 1. Ako postaviť figúry na šachovnici\nNa začiatku hry je šachovnica položená tak, že každý hráč má biely (alebo svetlý) štvorec v pravom dolnom rohu.\n\nRozostavenie šachovnice\n\nFigúrky sú potom tak isto poukladané každý raz. Druhý rad je zaplnený pešiakmi. Veže idú do rohov, potom jazdci vedľa nich, nasledujú strelci a nakoniec dáma, ktorá vždy ide na svoju farbu (biela dáma na bielu, čierna dáma na čiernu) a kráľ na zvyšný štvorec.\n\nŠachovnica\n\nPostaviť figúry na začiatku partie je naozaj jednoduché.\n\nexplorer Odporúčaný nástroj -> Trénuj prehľad na šachovnici\n\nKrok 2. Ako sa hýbu šachové figúry\nKaždá zo 6 rôznych figúr sa hýbe rôzne. Nemôžu sa hýbať cez iné figúry (hoci jazdec môže skákať cez iné figúry) a nikdy sa nemôžu hýbať na polia s vlastnými figúrami. Avšak, môžu sa posunúť na miesto súperových figúr, ktoré sa potom berú. Figúry sa vo všeobecnosti hýbu na pozície, kde môžu brať iné figúry (tým, že prídu na ich pole a potom ich nahradia), brániť vlastné figúry, aby ich súper nebral alebo kontrolovať dôležité polia.\n\nAko ťahať kráľom\nKráľ je najdôležitejšia figúrka, ale je jedna z najslabších. Kráľ môže ísť len na 1 vedľajší štvorec ľubovoľným smerom - hore, dole, na strany a diagonálne. Kráľ sa nikdy nemôže posunúť do šachu (kde by mohol byť vyhodený). Keď je kráľ napadnutý inou figúrou, nazýva sa to „šach“.\n\nHýbanie kráľom v šachu\n\nAko ťahať dámou\nDáma je najsilnejšia figúrka. Môže sa posúvať v ľubovoľnom smere - dopredu, dozadu, do strán alebo diagonálne - tak ďaleko, pokiaľ jej nestojí v ceste iná svoja figúrka. A takisto, ako aj s ostatnými figúrkami, ak dáma berie súperovu figúrku, jej ťah tým skončil. Všimni si, ako biela dáma berie čiernu dámu a potom čierny kráľ je donútený sa hýbať.\n\nHýbanie dámou v šachu\n\nAko ťahať vežou\nVeža sa môže pohybovať tak ďaleko, ako chce, ale len dopredu, dozadu a do strán. Veže sú značne silné figúrky, keď sa kryjú navzájom alebo keď spolupracujú!\n\nHýbanie vežou v šachu\n\nAko ťahať strelcom\nStrelec sa môže hýbať tak ďaleko, ako chce, ale len diagonálne. Každý strelec štartuje na 1 farbe (svetlej alebo tmavej) a musí na tej farbe vždy ostať. Strelci dobre spolupracujú, pretože každý kryje slabiny toho druhého.\n\nHýbanie strelcom v šachu\n\nAko ťahať jazdcom\nJazdci sa pohybujú úplne iným spôsobom ako ostatné figúry - idú 2 políčka jedným smerom a potom 1 ďalšie políčko pod 90° uhlom - do písmena \"L\". Jazdci sú taktiež jedinými figúrami, ktoré môžu prechádzať ponad inými figúrami.\n\nHýbanie jazdcom v šachu\n\nAko ťahať pešiakom\nPešiaci sú nezvyčajní, pretože sa hýbu a berú rozdielnymi smermi: hýbu sa dopredu, ale berú diagonálne. Pešiaci sa môžu hýbať len 1 políčko dopredu, okrem prvého ťahu, kedy sa môžu posunúť o 2 polia. Pešiaci môžu brať len na 1 diagonálnom políčku pred nimi. Nikdy sa nemôžu hýbať alebo brať iné figúry dozadu. Ak je priamo pred pešiakom iná figúra, nemôže sa ďalej posúvať ani tú figúru zobrať.\n\n");
        jScrollPane1.setViewportView(jTextPane1);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 160, 480, 520));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 800, 800));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Tips_And_Rules.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Tips_And_Rules.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Tips_And_Rules.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Tips_And_Rules.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Tips_And_Rules().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextPane jTextPane1;
    // End of variables declaration//GEN-END:variables
}
